package com.coffi.adressbook;

public class MainActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }
}
package com.coffi.addressbook
public class AddEditFragment extends Fragment

    public interface

    private long rowID; 
    private Bundle contactInfoBundle; 

    private EditText nameEditText;
    private EditText phoneEditText;
    private EditText emailEditText;
    private EditText streetEditText;
    private EditText cityEditText;
    private EditText stateEditText;
    private EditText zipEditText;
    
    @Override
    public void onAttach(Activity activity)
    {
        super.onAttach(activity);
        listener = (AddEditFragmentListener) activity;
    }
    
    @Override
    public void onDetach()
    {
        super.onDetach();
        listener = null;
    }
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState)
    {
        super.onCreateView(inflater, container, savedInstanceState);
        setRetainInstance(true); 
        setHasOptionsMenu(true); 
        View view =
                inflater.inflate(R.layout.fragment_add_edit, container, false);
        nameEditText = (EditText) view.findViewById(R.id.nameEditText);
        phoneEditText = (EditText) view.findViewById(R.id.phoneEditText);
        emailEditText = (EditText) view.findViewById(R.id.emailEditText);
        streetEditText = (EditText) view.findViewById(R.id.streetEditText);
        cityEditText = (EditText) view.findViewById(R.id.cityEditText);
        stateEditText = (EditText) view.findViewById(R.id.stateEditText);
        zipEditText = (EditText) view.findViewById(R.id.zipEditText);

        contactInfoBundle = getArguments();

        if (contactInfoBundle != null)
        {
            rowID = contactInfoBundle.getLong(MainActivity.ROW_ID);
            nameEditText.setText(contactInfoBundle.getString("name"));
            phoneEditText.setText(contactInfoBundle.getString("phone"));
            emailEditText.setText(contactInfoBundle.getString("email"));
            streetEditText.setText(contactInfoBundle.getString("street"));
            cityEditText.setText(contactInfoBundle.getString("city"));
            stateEditText.setText(contactInfoBundle.getString("state"));
            zipEditText.setText(contactInfoBundle.getString("zip"));
        }

        // set Save Contact Button's event listener
        Button saveContactButton =
                (Button) view.findViewById(R.id.saveContactButton);
        saveContactButton.setOnClickListener(saveContactButtonClicked);
        return view;
    }
    OnClickListener saveContactButtonClicked = new OnClickListener()
    {
        @Override
        public void onClick(View v)
        {
            if (nameEditText.getText().toString().trim().length() != 0)
            {
                AsyncTask<Object, Object, Object> saveContactTask =
                        new AsyncTask<Object, Object, Object>()
                        {
                            @Override
                            protected Object doInBackground(Object... params)
                            {
                                saveContact(); // save contact to the database
                                return null;
                            }

                            @Override
                            protected void onPostExecute(Object result)
                            {
                                InputMethodManager imm = (InputMethodManager)
                                        getActivity().getSystemService(
                                                Context.INPUT_METHOD_SERVICE);
                                imm.hideSoftInputFromWindow(
                                        getView().getWindowToken(), 0);

                                listener.onAddEditCompleted(rowID);
                            }
                saveContactTask.execute((Object[]) null);
            }
            else // required contact name is blank, so display error dialog
            {
                DialogFragment errorSaving =
                        new DialogFragment()
                        {
                            @Override
                            public Dialog onCreateDialog(Bundle savedInstanceState)
                            {
                                AlertDialog.Builder builder =
                                        new AlertDialog.Builder(getActivity());
                                builder.setMessage(R.string.error_message);
                                builder.setPositiveButton(R.string.ok, null);
                                return builder.create();
                            }
                        };

                errorSaving.show(getFragmentManager(), "error saving contact");
            }


    // saves contact information to the database
    private void saveContact()
    {
        // get DatabaseConnector to interact with the SQLite database
        DatabaseConnector databaseConnector =
                new DatabaseConnector(getActivity());

        if (contactInfoBundle == null)
        {
            // insert the contact information into the database
            rowID = databaseConnector.insertContact(
                    nameEditText.getText().toString(),
                    phoneEditText.getText().toString(),
                    emailEditText.getText().toString(),
                    streetEditText.getText().toString(),
                    cityEditText.getText().toString(),
                    stateEditText.getText().toString(),
                    zipEditText.getText().toString());
        }
        else
        {
            databaseConnector.updateContact(rowID,
                    nameEditText.getText().toString(),
                    phoneEditText.getText().toString(),
                    emailEditText.getText().toString(),
                    streetEditText.getText().toString(),
                    cityEditText.getText().toString(),
                    stateEditText.getText().toString(),
                    zipEditText.getText().toString());
        }



